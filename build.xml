<?xml version="1.0" encoding="UTF-8"?>
<project name="Commerce Kickstart" default="env">
  <!-- Locations of required binaries. -->
  <property name="drush" value="${project.basedir}/bin/drush" />
  <property name="composer" value="/usr/local/bin/composer" />
  <property name="rsync" value="/usr/bin/rsync" />
  <property name="bzip2" value="/usr/bin/bzip2" />
  <property name="bunzip2" value="/usr/bin/bunzip2" />
  <property name="php" value="/usr/local/bin/php" />

  <!-- Database credentials. -->
  <property name="db.type" value="mysql" />
  <property name="db.host" value="localhost" />
  <property name="db.user" value="root" />
  <property name="db.password" value="" />
  <property name="db.database" value="commerce_kickstart" />
  <property name="db.url" value="${db.type}://${db.user}:${db.password}@${db.host}/${db.database}" />

  <!-- Installation and build-specific variables. -->
  <property name="url" value="http://localhost" />
  <property name="docroot" value="web" />
  <property name="profile" value="${docroot}/profiles/commerce_kickstart" />
  <property name="site" value="${docroot}/sites/default" />
  <property name="version" value="HEAD" />

  <!-- Test variables -->
  <property name="tests.runner" value="core/scripts/run-tests.sh" />
  <property name="tests.non_js" value="PHPUnit-Unit,PHPUnit-Kernel" />
  <property name="tests.js" value="PHPUnit-FunctionalJavascript" />

  <!-- Finds required binaries. -->
  <target name="env">
    <if>
      <not>
        <available file="${drush}" property="drush.exists" />
      </not>
      <then>
        <exec command="which drush" outputProperty="drush" />
      </then>
    </if>
    <exec command="which composer" outputProperty="composer" />
    <exec command="which rsync" outputProperty="rsync" />
    <exec command="which bzip2" outputProperty="bzip2" />
    <exec command="which bunzip2" outputProperty="bunzip2" />
    <exec command="which php" outputProperty="php" />
  </target>

  <!-- Syncs the Lightning profile into the Drupal code base. -->
  <target name="push" depends="env">
    <!-- Create the destination if it doesn't exist. -->
    <mkdir dir="${profile}" />

    <!-- rsync the profile, excluding developer flotsam. -->
    <filesync destinationDir="${profile}" rsyncPath="${rsync}" sourceDir="." verbose="false" exclude=".idea,bin,build.xml,.git,.gitignore,${docroot},karma.conf.js,*.make,node_modules,.travis.yml,vendor" />
  </target>

  <target name="pull" depends="env">
    <filesync destinationDir="." rsyncPath="${rsync}" sourceDir="${profile}/" verbose="false" exclude="modules/contrib" />
  </target>

  <target name="preinstall" depends="env">
    <!-- Prepare PHPUnit. -->
    <mkdir dir="${docroot}/modules" />
    <mkdir dir="${docroot}/themes" />
    <mkdir dir="${docroot}/sites/simpletest" />
  </target>

  <!-- Installs Lightning and sets it up for development. -->
  <target name="install" depends="preinstall">
    <!-- Use passthru() when executing drush site-install so that we'll know if errors occur. -->
    <exec command="${drush} site-install commerce_kickstart -v --yes --db-url='${db.url}'" dir="${docroot}" passthru="true" checkreturn="true"/>
    <chmod file="${site}" mode="0755" />
  </target>

  <!-- Builds a Lightning code base from legacy Drush make files. -->
  <target name="build-legacy" depends="env">
    <if>
      <available file="${docroot}" property="docroot.exists" />
      <then>
        <exec command="${composer} package" />
        <delete dir="${docroot}" />
      </then>
    </if>

    <exec command="${drush} make drupal-org-core.make ${docroot} --yes" />
    <exec command="${drush} make drupal-org.make ${docroot} --no-core --yes" />
    <!-- Because legacy builds are not Composer-aware, we need to explicitly
    require dependencies. Eugh. -->
    <exec command="${composer} require drush/drush drupal/drupal-extension j7mbo/twitter-api-php drupal/commerce drupal/swiftmailer" dir="${docroot}" />

    <phingcall target="push" />
  </target>

  <!-- Destroys the installed code base. -->
  <target name="destroy">
    <delete failonerror="true" includeemptydirs="true">
      <fileset dir="." defaultexcludes="false">
        <include name="bin/**" />
        <include name="${docroot}/**" />
        <include name="node_modules/**" />
        <include name="vendor/**" />
      </fileset>
    </delete>
  </target>

  <!-- Empties the database by dropping and recreating it. -->
  <target name="reset-db">
    <!-- pdosqlexec requires an SQL file to execute. -->
    <echo message="DROP DATABASE ${db.database}; CREATE DATABASE ${db.database};" file=".reset.sql" />
    <pdosqlexec url="${db.type}:host=${db.host}" userid="${db.user}" password="${db.password}" src=".reset.sql" />
    <delete file=".reset.sql" />
  </target>

  <!-- Symlinks .git/hooks/pre-commit to our repo's pre-commit script -->
  <target name="symlink">
    <symlink link=".git/hooks/pre-commit" target="git-hooks/pre-commit" overwrite="true" />
  </target>

  <target name="tests" depends="preinstall">
    <exec command="../bin/phpunit --configuration ./core profiles/commerce_kickstart --group commerce_kickstart" dir="${docroot}" passthru="true" checkreturn="true" />
  </target>

</project>
